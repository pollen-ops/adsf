
def fit_BK_regression(summary_df):
    # Initialize output columns
    summary_df['K_fit_comp'], summary_df['B_fit_comp'], summary_df['R_squared_comp'] = np.nan, np.nan, np.nan
    summary_df['mass_flow'], summary_df['P1_squared_minus_P2_squared'], summary_df['rho'], summary_df['mu'] = np.nan, np.nan, np.nan, np.nan
    summary_df['x_comp'], summary_df['y_comp'] = np.nan, np.nan

    for serial in summary_df['Serial Number'].unique():
        group = summary_df[summary_df['Serial Number'] == serial]
        x_vals, y_vals = [], []

        for idx, row in group.iterrows():
            Q, P1, P2, T = row['Flow_avg'], row['Avg_PT2_Pa'], row['Avg_PT3_Pa'], row['Avg_Temp_K']
            if Q <= 0 or P1 <= 0 or P2 <= 0:
                continue

            P_avg = (P1 + P2) / 2
            mu = PropsSI('VISCOSITY', 'P', P_avg, 'T', T, FLUID_NAME)
            rho = PropsSI('D', 'P', P_avg, 'T', T, FLUID_NAME)
            R = PropsSI('GAS_CONSTANT', FLUID_NAME)
            m_dot = Q * rho  # mass flow rate

            delta_P_squared = P1**2 - P2**2
            y = delta_P_squared / SAMPLE_LENGTH
            x = rho * m_dot**2

            # Store values for regression
            x_vals.append(x)
            y_vals.append(y)

            # Save to DataFrame
            summary_df.loc[idx, 'mass_flow'] = m_dot
            summary_df.loc[idx, 'P1_squared_minus_P2_squared'] = delta_P_squared
            summary_df.loc[idx, 'rho'] = rho
            summary_df.loc[idx, 'mu'] = mu
            summary_df.loc[idx, 'x_comp'] = x
            summary_df.loc[idx, 'y_comp'] = y

            # Debug print
            print(f"Serial: {serial}, Index: {idx}")
            print(f"Q: {Q}, P1: {P1}, P2: {P2}, T: {T}")
            print(f"mu: {mu}, rho: {rho}, m_dot: {m_dot}")
            print(f"x: {x}, y: {y}")

        
        if len(x_vals) >= 2:
            slope, intercept, r_value, _, _ = linregress(x_vals, y_vals)

            # Compute K from intercept
            K_comp = (2 * np.mean(summary_df.loc[summary_df['Serial Number'] == serial, 'mu']) *
                      np.mean(summary_df.loc[summary_df['Serial Number'] == serial, 'mass_flow']) *
                      R * np.mean(summary_df.loc[summary_df['Serial Number'] == serial, 'Avg_Temp_K'])) / \
                     (SAMPLE_AREA * intercept)
            B_comp = slope

            summary_df.loc[summary_df['Serial Number'] == serial, 'K_fit_comp'] = K_comp
            summary_df.loc[summary_df['Serial Number'] == serial, 'B_fit_comp'] = B_comp
            summary_df.loc[summary_df['Serial Number'] == serial, 'R_squared_comp'] = r_value ** 2

            
            print(f"Fit for Serial {serial}: K_fit_comp = {K_comp}, B_fit_comp = {B_comp}, RÂ² = {r_value ** 2}")

    return summary_df
