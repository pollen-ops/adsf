import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt

# Data
porosity = np.array([0.1, 0.15, 0.2, 0.25, 0.3])
permeability = np.array([1e-14, 2e-14, 5e-14, 1e-13, 2e-13])

# Constraint point
phi0 = 0.104
K0 = 1e-16
C = (10 * phi0)**10

# Model with gamma eliminated
def constrained_model(phi, alpha, beta):
    gamma = (K0 - alpha * phi0 - beta * phi0**2) / C
    return alpha * phi + beta * phi**2 + gamma * (10 * phi)**10

# Fit
popt, _ = curve_fit(constrained_model, porosity, permeability)
alpha, beta = popt

# Recover gamma
gamma = (K0 - alpha * phi0 - beta * phi0**2) / C

print(f"Alpha = {alpha:.4e}\nBeta  = {beta:.4e}\nGamma = {gamma:.4e}")

# Plot
phi_fit = np.linspace(0.09, 0.31, 200)
k_fit = constrained_model(phi_fit, alpha, beta)

plt.scatter(porosity, permeability, label='Data', color='blue')
plt.plot(phi_fit, k_fit, label='Fitted (hard constraint)', color='red')
plt.scatter([phi0], [K0], label='Constraint (10.4%, 1e-16)', color='green', zorder=5)
plt.yscale('log')
plt.xlabel('Porosity')
plt.ylabel('Permeability')
plt.legend()
plt.grid(True, which='both', linestyle='--')
plt.title("Fitted Model with Hard Origin Constraint")
plt.show()
