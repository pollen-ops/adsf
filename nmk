
def fit_darcy_forchheimer_compressible(summary_df):

    for col in ['K_fit_incomp', 'B_fit_incomp', 'R_squared_incomp',
                'K_fit_comp', 'B_fit_comp', 'R_squared_comp',
                'delta p', 'flow', 'vel', 'density', 'viscosity',
                'x_incomp', 'y_incomp', 'x_comp', 'y_comp', 'Reynolds Number']:
        summary_df[col] = np.nan


    for serial in summary_df['Serial Number'].unique():
        group = summary_df[summary_df['Serial Number'] == serial]
        x_vals_incomp, y_vals_incomp = [], []
        x_vals_comp, y_vals_comp = [], []

        last_mu = last_rho = last_v = None  # For later use in B calculation

        for idx, row in group.iterrows():
            Q, dP, P_1, P_3, T = row['Flow_avg'], row['DP23_avg'], row['Avg_PT2_Pa'], row['Avg_PT3_Pa'], row['Avg_Temp_K']
            if Q <= 0 or dP <= 0:
                continue

            P = (P_1 + P_3) / 2
            v = Q / SAMPLE_AREA
            mu = PropsSI('VISCOSITY', 'P', P, 'T', T, FLUID_NAME)
            rho = PropsSI('D', 'P', P, 'T', T, FLUID_NAME)
            R_con = PropsSI('GAS_CONSTANT', FLUID_NAME)


            last_mu, last_rho, last_v = mu, rho, v


            x_incomp = (rho * v) / mu
            y_incomp = (dP / SAMPLE_LENGTH) * (1 / (v * mu))


            m_dot = Q * rho
            deltaP_squared = abs(P_1**2 - P_3**2)
            x_comp = (rho * v) / mu
            y_comp = (2 * mu * m_dot * R_con * T * SAMPLE_LENGTH) / (SAMPLE_AREA * deltaP_squared)


            x_vals_incomp.append(x_incomp)
            y_vals_incomp.append(y_incomp)
            x_vals_comp.append(x_comp)
            y_vals_comp.append(y_comp)


            summary_df.loc[idx, 'delta p'] = dP
            summary_df.loc[idx, 'flow'] = Q
            summary_df.loc[idx, 'vel'] = v
            summary_df.loc[idx, 'density'] = rho
            summary_df.loc[idx, 'viscosity'] = mu
            summary_df.loc[idx, 'x_incomp'] = x_incomp
            summary_df.loc[idx, 'y_incomp'] = y_incomp
            summary_df.loc[idx, 'x_comp'] = x_comp
            summary_df.loc[idx, 'y_comp'] = y_comp
            summary_df.loc[idx, 'Reynolds Number'] = (rho * v * SAMPLE_LENGTH) / mu


        if len(x_vals_incomp) >= 2:
            slope_i, intercept_i, r_i, _, _ = linregress(x_vals_incomp, y_vals_incomp)
            K_fit_i = abs(1 / intercept_i)
            B_fit_i = abs((slope_i * last_mu) / (last_rho * last_v))
            summary_df.loc[summary_df['Serial Number'] == serial, 'K_fit_incomp'] = K_fit_i
            summary_df.loc[summary_df['Serial Number'] == serial, 'B_fit_incomp'] = B_fit_i
            summary_df.loc[summary_df['Serial Number'] == serial, 'R_squared_incomp'] = r_i ** 2

        if len(x_vals_comp) >= 2:
            slope_c, intercept_c, r_c, _, _ = linregress(x_vals_comp, y_vals_comp)
            K_fit_c = abs(1 / intercept_c)
            B_fit_c = abs((slope_c * last_mu) / (last_rho * last_v))
            summary_df.loc[summary_df['Serial Number'] == serial, 'K_fit_comp'] = K_fit_c
            summary_df.loc[summary_df['Serial Number'] == serial, 'B_fit_comp'] = B_fit_c
            summary_df.loc[summary_df['Serial Number'] == serial, 'R_squared_comp'] = r_c ** 2

    return summary_df
